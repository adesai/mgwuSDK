Drag the mgwuSDK.embeddedframework folder into your project.

First paste:
#import <mgwuSDK/MGWU.h>
in your appDelegate.m file.
Then paste these lines of code into your appDelegate ApplicationDidFinishLaunching method:
	[MGWU loadMGWU:@"devid"];
#ifdef DEBUG
	[MGWU debug];
#endif
	[MGWU forceFacebook];
Where devid is replaced by your developer id

Now we need to do some things to set up facebook.
Add this method to your appDelegate.m file:
- (BOOL)application:(UIApplication *)application
            openURL:(NSURL *)url
  sourceApplication:(NSString *)sourceApplication
         annotation:(id)annotation {
    // attempt to extract a token from the url
    return [MGWU handleURL:url];
}

Now follow step 4 from this link: (IGNORE 1-3)
https://developers.facebook.com/docs/getting-started/getting-started-with-the-ios-sdk/#newapp
You will need to sign up as a developer. Once you have created the app on facebook, friend http://facebook.com/DesaiAshu and add him as an admin to your app.
Then follow step 5 from that tutorial starting from "Add the ''-lsqlite3.0'' SQL library to the list of build dependencies:" (IGNORE EVERYTHING ABOVE THAT)
//Will clean this tutorial up later

There are a few methods which should get you started.

The first will register the player with the server, download information about him including his list of friends and his current past games.
Currently the list of friends is simply the list of all registered devices (so the first device you run this on will have no friends, but once you run it on a second device it will have friends). 
+ (void)getMyInfoWithCallback:(SEL)m onTarget:(id)t;

To begin download use the line:
[MGWU getMyInfoWithCallback:@selector(receivedInfo:) onTarget:self];

Then in the same class, add the following method:
- (void)receivedInfo:(NSDictionary*)myInfo
{
	//Do stuff with scores in here! Display them!
}

The dictionary has the keys @"friends" and @"games", both objects stored are NSArrays containing dictionaries.
Each friend object has a username and a name, the game object is described later.

+ (NSArray *)friendsToInvite; //Returns a list of facebook friends who are not playing the game, invite functionality to be added

+ (void)getPlayerWithUsername:(NSString*)user withCallback:(SEL)m onTarget:(id)t; //Will provide a dictionary of a player who's username you submitted (or nil if the player doesnt exist or is you), this method works in the same way as getInfoWithCallback

+ (void)getRandomPlayerWithCallback:(SEL)m onTarget:(id)t; //Will provide a dictionary of a player at random


The second method is to make a move in a game.

+ (void)move:(NSDictionary*)move withMoveNumber:(int)moveNumber forGame:(int)gameID withGameState:(NSString*)gameState withGameData:(NSDictionary*)gameData againstPlayer:(NSString*)friend withCallback:(SEL)m onTarget:(id)t;

There are 4 cases where this can be used.

1. Beginning a game:
The parameter move should be a dictionary with any info about the move that was just performed
The parameter moveNumber should be 1
The parameter gameID should be 0
The parameter gameState should be @"started"
The parameter gameData should be a dictionary with any info about the game that you want
The parameter friend should be the mgid of the player you are starting a game with (retrieved from the list of friends you got prior)
The callback and target should be similar to the above method (target is typically self and callback is @selector(methodname:) where methodname is the name of the method you wish to have called)

2. Making a move in the game:
The parameter move should be a dictionary with any info about the move that was just performed
The parameter moveNumber should be 1 + the move number of the game retrieved from the list of games
The parameter gameID should be the gameId retrieved from the list of games
The parameter gameState should be @"inprogress"
The parameter gameData should be a dictionary with any info about the game that you want
The parameter friend should be the mgid of the player you are playing against, retrieved from the list of games
The callback and target should be similar to the above method (target is typically self and callback is @selector(methodname:) where methodname is the name of the method you wish to have called)

3. Making a move to end a game (checkmate):
The parameter move should be a dictionary with any info about the move that was just performed
The parameter moveNumber should be 1 + the move number of the game retrieved from the list of games
The parameter gameID should be the gameId retrieved from the list of games
The parameter gameState should be @"ended"
The parameter gameData should be a dictionary with any info about the game that you want
The parameter friend should be the mgid of the player you are playing against, retrieved from the list of games
The callback and target should be similar to the above method (target is typically self and callback is @selector(methodname:) where methodname is the name of the method you wish to have called)

4. Beginning and ending a game with one move:
The parameter move should be a dictionary with any info about the move that was just performed
The parameter moveNumber should be 1
The parameter gameID should be 0
The parameter gameState should be @"onemove"
The parameter gameData should be a dictionary with any info about the game that you want
The parameter friend should be the mgid of the player you are playing against, retrieved from the list of games
The callback and target should be similar to the above method (target is typically self and callback is @selector(methodname:) where methodname is the name of the method you wish to have called)

If you mess up the parameters the device will show a message "Error with Connection" and the error log should be printed to the console.


